{"version":3,"sources":["../src/OauthTwitter.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;IAMqB;AACnB,WADmB,UACnB,OAA6B;QAAf,eAAe;QAAV,qBAAU;;0BADV,YACU;;AAC3B,0BAAO,GAAP,EAAY,+BAAZ,EAD2B;AAE3B,0BAAO,MAAP,EAAe,kCAAf,EAF2B;AAG3B,SAAK,WAAL,GAAmB,GAAnB,CAH2B;AAI3B,SAAK,cAAL,GAAsB,MAAtB,CAJ2B;AAK3B,SAAK,MAAL,GAAc,IAAd,CAL2B;AAM3B,SAAK,OAAL,GAAe,IAAf,CAN2B;AAO3B,SAAK,MAAL,GAAc,IAAd,CAP2B;GAA7B;;eADmB;;mCAWJ;;;AACb,UAAI,UAAU,yDAAV,CADS;AAEb,UAAI,QAAQ,iBACV,6CADU,EAEV,4CAFU,EAGV,KAAK,WAAL,EACA,KAAK,cAAL,EACA,MALU,EAMV,IANU,EAOV,WAPU,CAAR,CAFS;;AAYb,UAAI,kBAAkB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACrD,YAAI,aAAa,KAAb,CADiD;AAErD,cAAK,OAAL,GAAe,UAAC,KAAD,EAAW;AACxB,cAAI,UAAJ,EAAgB;AACd,mBADc;WAAhB;;AAIA,uBAAa,IAAb,CALwB;AAMxB,kBAAQ,KAAR,EANwB;SAAX,CAFsC;;AAWrD,cAAK,MAAL,GAAc,UAAC,KAAD,EAAU;AACtB,cAAI,UAAJ,EAAgB;AACd,mBADc;WAAhB;;AAIA,uBAAa,IAAb,CALsB;AAMtB,iBAAO,KAAP,EANsB;SAAV,CAXuC;OAArB,CAA9B,CAZS;;AAiCb,YAAM,oBAAN,CAA2B,UAAC,KAAD,EAAQ,WAAR,EAAqB,kBAArB,EAAyC,OAAzC,EAAqD;AAC9E,YAAI,KAAJ,EAAW;AACT,gBAAK,MAAL,CAAY,KAAZ,EADS;AAET,iBAFS;SAAX;;AAKA,YAAI,MAAM,UAAU,WAAV,CANoE;AAO9E,cAAK,cAAL,CAAoB,KAApB,EAA2B,WAA3B,EAAwC,kBAAxC,EAA4D,GAA5D,EAP8E;OAArD,CAA3B,CAjCa;AA0Cb,aAAO,eAAP,CA1Ca;;;;mCA6CA,OAAO,aAAa,oBAAoB,KAAK;;;AAC1D,WAAK,MAAL,GAAc,4BAAkB,EAAE,OAAO,GAAP,EAAY,QAAQ,GAAR,EAAhC,CAAd,CAD0D;AAE1D,WAAK,MAAL,CAAY,EAAZ,CAAe,OAAf,EAAwB,YAAM;AAC5B,eAAK,MAAL,CAAY,IAAI,KAAJ,CAAU,0DAAV,CAAZ,EAD4B;OAAN,CAAxB,CAF0D;AAK1D,WAAK,MAAL,CAAY,WAAZ,CAAwB,EAAxB,CAA2B,eAA3B,EAA4C,UAAC,KAAD,EAAQ,GAAR,EAAgB;AAC1D,YAAI,mBAAJ,CAD0D;AAE1D,YAAI,UAAU,IAAI,KAAJ,CAAU,8CAAV,CAAV,EAAqE;AACvE,gBAAM,mBAAN,CAA0B,WAA1B,EAAuC,kBAAvC,EAA2D,QAAQ,CAAR,CAA3D,EAAuE,UAAC,KAAD,EAAQ,kBAAR,EAA4B,yBAA5B,EAA0D;AAC/H,gBAAI,KAAJ,EAAW;AACT,qBAAK,MAAL,CAAY,KAAZ,EADS;AAET,qBAFS;aAAX;;AAKA,mBAAK,OAAL,CAAa;AACX,kCAAoB,kBAApB;AACA,yCAA2B,yBAA3B;aAFF,EAN+H;AAU/H,mBAAK,MAAL,CAAY,KAAZ,GAV+H;WAA1D,CAAvE,CADuE;SAAzE;;AAeA,cAAM,cAAN,GAjB0D;OAAhB,CAA5C,CAL0D;AAwB1D,WAAK,MAAL,CAAY,OAAZ,CAAoB,GAApB,EAxB0D;;;;SAxDzC","file":"OauthTwitter.js","sourcesContent":["'use strict';\n\nimport assert from 'assert';\nimport { BrowserWindow } from 'electron';\nimport { OAuth } from 'oauth';\n\nexport default class AuthWindow {\n  constructor({ key, secret }) {\n    assert(key, 'OAuth Consumer Key is needed!');\n    assert(secret, 'OAuth Consumer secret is needed!');\n    this.consumerKey = key;\n    this.consumerSecret = secret;\n    this.window = null;\n    this.resolve = null;\n    this.reject = null;\n  }\n\n  startRequest() {\n    var authUrl = 'https://api.twitter.com/oauth/authenticate?oauth_token=';\n    let oauth = new OAuth(\n      'https://api.twitter.com/oauth/request_token',\n      'https://api.twitter.com/oauth/access_token',\n      this.consumerKey,\n      this.consumerSecret,\n      '1.0A',\n      null,\n      'HMAC-SHA1'\n    );\n\n    let deferredPromise = new Promise((resolve, reject) => {\n      let isResolved = false;\n      this.resolve = (value) => {\n        if (isResolved) {\n          return;\n        }\n\n        isResolved = true;\n        resolve(value);\n      };\n\n      this.reject = (error)=> {\n        if (isResolved) {\n          return;\n        }\n\n        isResolved = true;\n        reject(error);\n      };\n    });\n\n    oauth.getOAuthRequestToken((error, oauth_token, oauth_token_secret, results) => {\n      if (error) {\n        this.reject(error);\n        return;\n      }\n\n      var url = authUrl + oauth_token;\n      this.getAccessToken(oauth, oauth_token, oauth_token_secret, url);\n    });\n    return deferredPromise;\n  }\n\n  getAccessToken(oauth, oauth_token, oauth_token_secret, url) {\n    this.window = new BrowserWindow({ width: 800, height: 600 });\n    this.window.on('close', () => {\n      this.reject(new Error('the window is closed before complete the authentication.'));\n    });\n    this.window.webContents.on('will-navigate', (event, url) => {\n      let matched;\n      if (matched = url.match(/\\?oauth_token=([^&]*)&oauth_verifier=([^&]*)/)) {\n        oauth.getOAuthAccessToken(oauth_token, oauth_token_secret, matched[2], (error, oauth_access_token, oauth_access_token_secret) => {\n          if (error) {\n            this.reject(error);\n            return;\n          }\n\n          this.resolve({\n            oauth_access_token: oauth_access_token,\n            oauth_access_token_secret: oauth_access_token_secret,\n          });\n          this.window.close();\n        });\n      }\n\n      event.preventDefault();\n    });\n    this.window.loadURL(url);\n  }\n}\n"]}